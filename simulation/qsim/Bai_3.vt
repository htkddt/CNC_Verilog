// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/24/2022 17:43:29"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Bai_3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Bai_3_vlg_sample_tst(
	D,
	LS,
	WR,
	clk,
	sampler_tx
);
input [7:0] D;
input  LS;
input  WR;
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(D or LS or WR or clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Bai_3_vlg_check_tst (
	Dir,
	Pulse,
	clk_1,
	data,
	f_full,
	flag_T,
	sampler_rx
);
input  Dir;
input  Pulse;
input  clk_1;
input [7:0] data;
input  f_full;
input  flag_T;
input sampler_rx;

reg  Dir_expected;
reg  Pulse_expected;
reg  clk_1_expected;
reg [7:0] data_expected;
reg  f_full_expected;
reg  flag_T_expected;

reg  Dir_prev;
reg  Pulse_prev;
reg  clk_1_prev;
reg [7:0] data_prev;
reg  f_full_prev;
reg  flag_T_prev;

reg  Dir_expected_prev;
reg  Pulse_expected_prev;
reg  clk_1_expected_prev;
reg [7:0] data_expected_prev;
reg  f_full_expected_prev;
reg  flag_T_expected_prev;

reg  last_Dir_exp;
reg  last_Pulse_exp;
reg  last_clk_1_exp;
reg [7:0] last_data_exp;
reg  last_f_full_exp;
reg  last_flag_T_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	Dir_prev = Dir;
	Pulse_prev = Pulse;
	clk_1_prev = clk_1;
	data_prev = data;
	f_full_prev = f_full;
	flag_T_prev = flag_T;
end

// update expected /o prevs

always @(trigger)
begin
	Dir_expected_prev = Dir_expected;
	Pulse_expected_prev = Pulse_expected;
	clk_1_expected_prev = clk_1_expected;
	data_expected_prev = data_expected;
	f_full_expected_prev = f_full_expected;
	flag_T_expected_prev = flag_T_expected;
end



// expected clk_1
initial
begin
	clk_1_expected = 1'bX;
end 

// expected f_full
initial
begin
	f_full_expected = 1'bX;
end 

// expected flag_T
initial
begin
	flag_T_expected = 1'bX;
end 
// expected data[ 7 ]
initial
begin
	data_expected[7] = 1'bX;
end 
// expected data[ 6 ]
initial
begin
	data_expected[6] = 1'bX;
end 
// expected data[ 5 ]
initial
begin
	data_expected[5] = 1'bX;
end 
// expected data[ 4 ]
initial
begin
	data_expected[4] = 1'bX;
end 
// expected data[ 3 ]
initial
begin
	data_expected[3] = 1'bX;
end 
// expected data[ 2 ]
initial
begin
	data_expected[2] = 1'bX;
end 
// expected data[ 1 ]
initial
begin
	data_expected[1] = 1'bX;
end 
// expected data[ 0 ]
initial
begin
	data_expected[0] = 1'bX;
end 

// expected Pulse
initial
begin
	Pulse_expected = 1'bX;
end 

// expected Dir
initial
begin
	Dir_expected = 1'bX;
end 
// generate trigger
always @(Dir_expected or Dir or Pulse_expected or Pulse or clk_1_expected or clk_1 or data_expected or data or f_full_expected or f_full or flag_T_expected or flag_T)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Dir = %b | expected Pulse = %b | expected clk_1 = %b | expected data = %b | expected f_full = %b | expected flag_T = %b | ",Dir_expected_prev,Pulse_expected_prev,clk_1_expected_prev,data_expected_prev,f_full_expected_prev,flag_T_expected_prev);
	$display("| real Dir = %b | real Pulse = %b | real clk_1 = %b | real data = %b | real f_full = %b | real flag_T = %b | ",Dir_prev,Pulse_prev,clk_1_prev,data_prev,f_full_prev,flag_T_prev);
`endif
	if (
		( Dir_expected_prev !== 1'bx ) && ( Dir_prev !== Dir_expected_prev )
		&& ((Dir_expected_prev !== last_Dir_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dir :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dir_expected_prev);
		$display ("     Real value = %b", Dir_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Dir_exp = Dir_expected_prev;
	end
	if (
		( Pulse_expected_prev !== 1'bx ) && ( Pulse_prev !== Pulse_expected_prev )
		&& ((Pulse_expected_prev !== last_Pulse_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Pulse :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Pulse_expected_prev);
		$display ("     Real value = %b", Pulse_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Pulse_exp = Pulse_expected_prev;
	end
	if (
		( clk_1_expected_prev !== 1'bx ) && ( clk_1_prev !== clk_1_expected_prev )
		&& ((clk_1_expected_prev !== last_clk_1_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clk_1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clk_1_expected_prev);
		$display ("     Real value = %b", clk_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_clk_1_exp = clk_1_expected_prev;
	end
	if (
		( data_expected_prev[0] !== 1'bx ) && ( data_prev[0] !== data_expected_prev[0] )
		&& ((data_expected_prev[0] !== last_data_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_exp[0] = data_expected_prev[0];
	end
	if (
		( data_expected_prev[1] !== 1'bx ) && ( data_prev[1] !== data_expected_prev[1] )
		&& ((data_expected_prev[1] !== last_data_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_exp[1] = data_expected_prev[1];
	end
	if (
		( data_expected_prev[2] !== 1'bx ) && ( data_prev[2] !== data_expected_prev[2] )
		&& ((data_expected_prev[2] !== last_data_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_exp[2] = data_expected_prev[2];
	end
	if (
		( data_expected_prev[3] !== 1'bx ) && ( data_prev[3] !== data_expected_prev[3] )
		&& ((data_expected_prev[3] !== last_data_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_exp[3] = data_expected_prev[3];
	end
	if (
		( data_expected_prev[4] !== 1'bx ) && ( data_prev[4] !== data_expected_prev[4] )
		&& ((data_expected_prev[4] !== last_data_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_exp[4] = data_expected_prev[4];
	end
	if (
		( data_expected_prev[5] !== 1'bx ) && ( data_prev[5] !== data_expected_prev[5] )
		&& ((data_expected_prev[5] !== last_data_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_exp[5] = data_expected_prev[5];
	end
	if (
		( data_expected_prev[6] !== 1'bx ) && ( data_prev[6] !== data_expected_prev[6] )
		&& ((data_expected_prev[6] !== last_data_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_exp[6] = data_expected_prev[6];
	end
	if (
		( data_expected_prev[7] !== 1'bx ) && ( data_prev[7] !== data_expected_prev[7] )
		&& ((data_expected_prev[7] !== last_data_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_exp[7] = data_expected_prev[7];
	end
	if (
		( f_full_expected_prev !== 1'bx ) && ( f_full_prev !== f_full_expected_prev )
		&& ((f_full_expected_prev !== last_f_full_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f_full :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_full_expected_prev);
		$display ("     Real value = %b", f_full_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_f_full_exp = f_full_expected_prev;
	end
	if (
		( flag_T_expected_prev !== 1'bx ) && ( flag_T_prev !== flag_T_expected_prev )
		&& ((flag_T_expected_prev !== last_flag_T_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port flag_T :: @time = %t",  $realtime);
		$display ("     Expected value = %b", flag_T_expected_prev);
		$display ("     Real value = %b", flag_T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_flag_T_exp = flag_T_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Bai_3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] D;
reg LS;
reg WR;
reg clk;
// wires                                               
wire Dir;
wire Pulse;
wire clk_1;
wire [7:0] data;
wire f_full;
wire flag_T;

wire sampler;                             

// assign statements (if any)                          
Bai_3 i1 (
// port map - connection between master ports and signals/registers   
	.D(D),
	.Dir(Dir),
	.LS(LS),
	.Pulse(Pulse),
	.WR(WR),
	.clk(clk),
	.clk_1(clk_1),
	.data(data),
	.f_full(f_full),
	.flag_T(flag_T)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// WR
initial
begin
	WR = 1'b0;
	WR = #832000 1'b1;
	WR = #1472000 1'b0;
	WR = #1344000 1'b1;
	WR = #1728000 1'b0;
	WR = #1216000 1'b1;
	WR = #1792000 1'b0;
	WR = #1024000 1'b1;
	WR = #2240000 1'b0;
end 

// LS
initial
begin
	LS = 1'b0;
end 
// D[ 7 ]
initial
begin
	D[7] = 1'b0;
end 
// D[ 6 ]
initial
begin
	D[6] = 1'b0;
end 
// D[ 5 ]
initial
begin
	D[5] = 1'b0;
end 
// D[ 4 ]
initial
begin
	D[4] = 1'b0;
end 
// D[ 3 ]
initial
begin
	D[3] = 1'b0;
	D[3] = #8192000 1'b1;
	D[3] = #2304000 1'b0;
end 
// D[ 2 ]
initial
begin
	D[2] = 1'b1;
	D[2] = #4544000 1'b0;
end 
// D[ 1 ]
initial
begin
	D[1] = 1'b1;
	D[1] = #2048000 1'b0;
	D[1] = #2496000 1'b1;
	D[1] = #3648000 1'b0;
end 
// D[ 0 ]
initial
begin
	D[0] = 1'b1;
	D[0] = #10496000 1'b0;
end 

Bai_3_vlg_sample_tst tb_sample (
	.D(D),
	.LS(LS),
	.WR(WR),
	.clk(clk),
	.sampler_tx(sampler)
);

Bai_3_vlg_check_tst tb_out(
	.Dir(Dir),
	.Pulse(Pulse),
	.clk_1(clk_1),
	.data(data),
	.f_full(f_full),
	.flag_T(flag_T),
	.sampler_rx(sampler)
);
endmodule

